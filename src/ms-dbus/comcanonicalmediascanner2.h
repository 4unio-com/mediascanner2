/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -p comcanonicalmediascanner2.h -c ComCanonicalMediascanner2 mediascanner2.xml com.canonical.MediaScanner2
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef COMCANONICALMEDIASCANNER2_H_1416571766
#define COMCANONICALMEDIASCANNER2_H_1416571766

#include"qtservice.h"

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.canonical.MediaScanner2
 */
class ComCanonicalMediascanner2: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.canonical.MediaScanner2"; }

public:
    ComCanonicalMediascanner2(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComCanonicalMediascanner2();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QList<MediaFileWire> > getAlbumSongs(AlbumWire album)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(album);
        return asyncCallWithArgumentList(QLatin1String("getAlbumSongs"), argumentList);
    }

    inline QDBusPendingReply<QString> getETag(const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filename);
        return asyncCallWithArgumentList(QLatin1String("getETag"), argumentList);
    }

    inline QDBusPendingReply<QStringList> listAlbumArtists(const QVariantMap &filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QLatin1String("listAlbumArtists"), argumentList);
    }

    inline QDBusPendingReply<QList<AlbumWire> > listAlbums(const QVariantMap &filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QLatin1String("listAlbums"), argumentList);
    }

    inline QDBusPendingReply<QStringList> listArtists(const QVariantMap &filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QLatin1String("listArtists"), argumentList);
    }

    inline QDBusPendingReply<QStringList> listGenres(const QVariantMap &filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QLatin1String("listGenres"), argumentList);
    }

    inline QDBusPendingReply<QList<MediaFileWire> > listSongs(const QVariantMap &filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QLatin1String("listSongs"), argumentList);
    }

    inline QDBusPendingReply<MediaFileWire> lookup(const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filename);
        return asyncCallWithArgumentList(QLatin1String("lookup"), argumentList);
    }

    inline QDBusPendingReply<QList<MediaFileWire> > query(const QString &q, int type, const QVariantMap &filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(q) << QVariant::fromValue(type) << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QLatin1String("query"), argumentList);
    }

    inline QDBusPendingReply<QList<MediaFileWire> > query(const QString &q, int type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(q) << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QLatin1String("query"), argumentList);
    }

    inline QDBusPendingReply<QList<AlbumWire> > queryAlbums(const QString &core_term, const QVariantMap &filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(core_term) << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QLatin1String("queryAlbums"), argumentList);
    }

    inline QDBusPendingReply<QStringList> queryArtists(const QString &q, const QVariantMap &filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(q) << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QLatin1String("queryArtists"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
